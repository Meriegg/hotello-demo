generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CheckoutStep {
  PERSONAL_DETAILS // step 1
  BILLING_DETAILS // step 2
  BOOKING_DETAILS // step 3
  REVIEW_INFORMATION // step 4
  FINAL_PAYMENT // step 5
}

model CheckoutSession {
  id   String       @id @default(cuid())
  step CheckoutStep @default(PERSONAL_DETAILS)

  // this is the cookie that contains the cart data
  cartDataCookie String

  personaldetails_firstName String?
  personaldetails_lastName  String?
  personaldetails_phoneNum  String?
  personaldetails_age       Int?

  billingdetails_countryOrRegion String?
  billingdetails_address         String?
  billingdetails_cityOrTown      String?
  billingdetails_postalCode      String?

  bookingdetails_checkIn  DateTime?
  bookingdetails_checkOut DateTime?

  // The guest details will be entered in the database
  // and connected to the booking once the customer completes the booking
  // until then they will be stored here 
  bookingdetails_guestInformation Json?

  // TODO: Any other stripe information for the final step 
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String   @unique
  phoneNum        String?
  phoneNumCountry String?
  age             Int
  createdOn       DateTime @default(now())

  billingRegion                String
  billingAddress               String
  billingCityTown              String
  billingPostalCode            String
  metadataSignedUpFromCheckout Boolean? @default(false)

  pastGuests BookingRoomGuestDetails[] @relation("PastGuests")
  role       UserRole                  @default(USER)
  bookings   Booking[]                 @relation("userBookings")
}

enum PaymentMethod {
  IN_FULL
  RESERVATION_HOLD
}

enum PaymentStatus {
  PAID
  // TODO: Add other payment statuses
}

model Booking {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "userBookings")

  rooms BookingRoom[] @relation("booking")

  bookedCheckIn        DateTime
  bookedCheckOut       DateTime
  calculatedStayInDays Int

  baseRoomsPrice       Decimal @db.Decimal(12, 2)
  reservationHoldPrice Decimal @db.Decimal(12, 2)

  // If the user pays in full this will be 0
  // If the user pays a reservation hold, the reservation hold price
  // will be detucted
  priceToPayOnCheckIn Decimal @db.Decimal(12, 2)

  paymentType   PaymentMethod
  paymentStatus PaymentStatus

  isFullyPaid Boolean

  createdOn DateTime @default(now())

  billingUserDetailsCopy Json?
  billingRoomsDataCopy   Json?
}

model BookingRoom {
  id String @id @default(cuid())

  calculatedStayInDays Int
  finalPriceForRoom    Decimal @db.Decimal(12, 2)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], name: "bookingRoom")

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], name: "booking")

  guestDetails BookingRoomGuestDetails[] @relation("BookingRoomGuestDetails")

  billingRoomCopy Json?
}

model BookingRoomGuestDetails {
  id String @id @default(cuid())

  bookingUserId String?
  bookingUser   User?   @relation(fields: [bookingUserId], references: [id], name: "PastGuests")

  bookingRoomId String
  bookingRoom   BookingRoom @relation(fields: [bookingRoomId], references: [id], name: "BookingRoomGuestDetails")

  firstName String
  lastName  String
  age       Int
}

model RoomCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  rooms     Room[]    @relation("roomsInCategory")
  createdOn DateTime  @default(now())
  updatedOn DateTime?
}

model Room {
  id                 String    @id @default(cuid())
  name               String    @unique
  price              Decimal   @db.Decimal(12, 2)
  images             String[]
  discountPercentage Int?
  discountedPrice    Decimal?  @db.Decimal(12, 2)
  createdOn          DateTime  @default(now())
  updatedOn          DateTime?

  hasSpecialNeeds Boolean
  accommodates    Int
  other           Json?

  categoryId String
  category   RoomCategory  @relation(fields: [categoryId], references: [id], name: "roomsInCategory")
  bookings   BookingRoom[] @relation("bookingRoom")
}
