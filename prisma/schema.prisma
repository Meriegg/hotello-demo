generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String   @unique
  phoneNum        String?
  phoneNumCountry String?
  age             Int
  createdOn       DateTime @default(now())

  billingRegion                String
  billingAddress               String
  billingCityTown              String
  billingPostalCode            String
  metadataSignedUpFromCheckout Boolean? @default(false)

  role     UserRole  @default(USER)
  bookings Booking[] @relation("userBookings")
}

enum PaymentMethod {
  IN_FULL
  RESERVATION_HOLD
}

enum PaymentStatus {
  PAID
  // TODO: Add other payment statuses
}

model Booking {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "userBookings")

  rooms BookingRoom[] @relation("booking")

  bookedCheckIn  DateTime
  bookedCheckOut DateTime

  paymentType   PaymentMethod
  paymentStatus PaymentStatus
  isFullyPaid   Boolean

  createdOn DateTime @default(now())

  billingUserDetailsCopy Json?
  billingFinalPrice      Float
  billingRoomsDataCopy   Json?
}

model BookingRoom {
  id String @id @default(cuid())

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], name: "bookingRoom")

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], name: "booking")

  guestDetails BookingRoomGuestDetails[] @relation("BookingRoomGuestDetails")
}

model BookingRoomGuestDetails {
  id String @id @default(cuid())

  bookingRoomId String
  bookingRoom   BookingRoom @relation(fields: [bookingRoomId], references: [id], name: "BookingRoomGuestDetails")

  firstName String
  lastName  String
  age       Int
}

model RoomCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  rooms     Room[]    @relation("roomsInCategory")
  createdOn DateTime  @default(now())
  updatedOn DateTime?
}

model Room {
  id        String    @id @default(cuid())
  name      String    @unique
  price     Float
  createdOn DateTime  @default(now())
  updatedOn DateTime?

  hasSpecialNeeds Boolean
  accommodates    Int
  other           Json?

  categoryId String
  category   RoomCategory  @relation(fields: [categoryId], references: [id], name: "roomsInCategory")
  bookings   BookingRoom[] @relation("bookingRoom")
}
