generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CheckoutStep {
  PERSONAL_DETAILS // step 1
  BILLING_DETAILS // step 2
  BOOKING_DETAILS // step 3
  REVIEW_INFORMATION // step 4
  FINAL_PAYMENT // step 5
}

model CheckoutSession {
  id   String       @id @default(cuid())
  step CheckoutStep @default(PERSONAL_DETAILS)

  // this is the cookie that contains the cart data
  productIds      String[]
  productJsonCopy Json?

  createdOn DateTime @default(now())

  personaldetails_firstName       String?
  personaldetails_lastName        String?
  personaldetails_phoneNum        String?
  personaldetails_phoneNumCountry String?
  personaldetails_email           String?
  personaldetails_age             Int?

  billingdetails_countryOrRegion String?
  billingdetails_address         String?
  billingdetails_cityOrTown      String?
  billingdetails_postalCode      String?

  bookingdetails_checkIn  DateTime?
  bookingdetails_checkOut DateTime?

  // The guest details will be entered in the database
  // and connected to the booking once the customer completes the booking
  // until then they will be stored here 
  bookingdetails_guestInformation Json?

  paymentIntentId  String?
  paymentType      PaymentType? @default(FULL_UPFRONT)
  createdBookingId String?      @unique
  createdBooking   Booking?
}

enum UserRole {
  USER
  ADMIN
}

enum AdminAccessLevel {
  LEVEL_0 // Read Only
  LEVEL_1 // Booking Management
  LEVEL_2 // Room management, Restaurant Management, Support
  LEVEL_3 // (Owner) Account Management
}

model User {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String   @unique
  phoneNum        String?
  phoneNumCountry String?
  age             Int
  createdOn       DateTime @default(now())

  billingRegion     String?
  billingAddress    String?
  billingCityTown   String?
  billingPostalCode String?

  signedUpFromCheckout Boolean? @default(false)
  isNewUser            Boolean  @default(true)

  emailVerifications EmailVerification[]       @relation("EmailVerifications")
  userSessions       UserSession[]             @relation("UserSessions")
  aiConversations    AiHelpResponse[]          @relation("AiConversations")
  pastGuests         BookingRoomGuestDetails[] @relation("PastGuests")
  role               UserRole                  @default(USER)
  adminAccessLevel   AdminAccessLevel          @default(LEVEL_0)
  bookings           Booking[]                 @relation("userBookings")
}

model UserSession {
  id String @id @default(cuid())

  sessionToken            String  @unique
  publicVerificationToken String
  currentIPHash           String?
  numOfIpChanges          Int     @default(0)
  requiresVerificaiton    Boolean @default(false)

  expiresOn DateTime
  createdOn DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "UserSessions")
}

model EmailVerification {
  id          String   @id @default(cuid())
  code        String
  alreadyUsed Boolean  @default(false)
  expiresOn   DateTime
  createdOn   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "EmailVerifications")
}

enum PaymentType {
  FULL_UPFRONT
  RESERVATION_HOLD
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

model Booking {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], name: "userBookings")

  rooms BookingRoom[] @relation("booking")

  bookedCheckIn        DateTime
  bookedCheckOut       DateTime
  calculatedStayInDays Int

  baseRoomsPrice       Int
  reservationHoldPrice Int

  personalDetailsFirstName       String
  personalDetailsLastName        String
  personalDetailsPhoneNum        String?
  personalDetailsPhoneNumCountry String?
  personalDetailsEmail           String
  personalDetailsAge             Int

  billingDetailsCountryOrRegion String
  billingDetailsAddress         String
  billingDetailsCityOrTown      String
  billingDetailsPostalCode      String

  customerCheckIn    DateTime?
  customerCheckOut   DateTime?
  otherServicesPrice Int?      @default(0)

  // If the user pays in full this will be 0
  // If the user pays a reservation hold, the reservation hold price
  // will be detucted
  priceToPayOnCheckIn Int

  paymentType     PaymentType
  paymentStatus   PaymentStatus
  paymentIntentId String        @unique
  stripeRefundId  String?

  createdOn DateTime @default(now())

  billingUserDetailsCopy Json?
  billingRoomsDataCopy   Json?
  checkoutSession        CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])
  checkoutSessionId      String?          @unique

  canceled Boolean @default(false)
}

model BookingRoom {
  id String @id @default(cuid())

  calculatedStayInDays Int
  finalPriceForRoom    Int

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], name: "bookingRoom")

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], name: "booking")

  guestDetails BookingRoomGuestDetails[] @relation("BookingRoomGuestDetails")

  billingRoomCopy Json?
}

model BookingRoomGuestDetails {
  id String @id @default(cuid())

  bookingUserId String?
  bookingUser   User?   @relation(fields: [bookingUserId], references: [id], name: "PastGuests")

  bookingRoomId String
  bookingRoom   BookingRoom @relation(fields: [bookingRoomId], references: [id], name: "BookingRoomGuestDetails")

  firstName String
  lastName  String
  age       Int
}

model RoomCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  rooms     Room[]    @relation("roomsInCategory")
  createdOn DateTime  @default(now())
  updatedOn DateTime?
}

model Room {
  id        String    @id @default(cuid())
  name      String    @unique
  price     Int
  images    String[]
  createdOn DateTime  @default(now())
  updatedOn DateTime?

  hasSpecialNeeds Boolean
  accommodates    Int
  other           Json?

  categoryId String
  category   RoomCategory  @relation(fields: [categoryId], references: [id], name: "roomsInCategory")
  bookings   BookingRoom[] @relation("bookingRoom")
}

enum ResponseFeedback {
  empty
  helpful
  not_helpful
}

model AiHelpResponse {
  id String @id @default(cuid())

  userId     String?
  user       User?            @relation(fields: [userId], references: [id], name: "AiConversations")
  userPrompt String
  feedback   ResponseFeedback @default(empty)

  aiTextResponse   String
  aiRoomidResponse String?

  fullAiResponse Json?
}
